
// MIXINS
//============================//

@mixin button($display:inline-block,$font-size:1em,$bg:$primary,$color:$white,$padding:12px 25px) {
	display: $display;
	background: $bg;
	color: $color;
	padding: $padding;
	font-size: $font-size;
	text-transform: uppercase;
	font-weight: bold;
	@include transition(all .25s ease);
	&:hover {
		background: tint($bg,10%);
	}
}


//style placeholder text
@mixin placeholder($color) {
	::-webkit-input-placeholder {color: $color;}
	:-moz-placeholder { color: $color; }
	::-moz-placeholder { color: $color; }
	:-ms-input-placeholder { color: $color; }
}



//2x images for retina screens
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}


// GRID
//============================//
//mixins to use with your own class names
//settings can be adjusted from _settings.scss

//site container/row, direct parent of columns
@mixin container($width:$container-width,$max-width:$container-max,$margin:0 auto,$style:$container-style) {
	@include clearfix();
	margin: $margin;

	@if $style == 'responsive' {
		max-width: $max-width;
		width: $width;
	} @else {
		@each $key, $val in $grid-breakpoints {
			@media (max-width:#{$val+$style}) {
				//todo: adaptive grid option
				max-width: #{$val};
			}
		}
	}

}

//columns, $count is required
@mixin column($count, $gutters: $grid-gutters, $offset: false, $float: left) {
	float: $float;
	width: #{($count/$grid-cols)*100+'%'};
  @if $gutters {
    padding-left: $gutters;
    padding-right: $gutters;
  }
  @if $offset {
  	margin-left: #{($offset/$grid-cols)*100+'%'};
  }
}








//===============================================================//
//Typography functions & mixins (shouldn't need to adjust)
//typography settings are in.... base/_settings.scss

@function context-calc($scale, $base, $value) {
	@return ($scale/$base)#{$value};
}
@function measure-margin($scale, $measure, $value) {
	$pixelValue: $measure/$scale;
	$remValue: $pixelValue * $font-base;

	@if $value == rem {
		@return $pixelValue#{$value};
	} @else if $value == em {
		@return ($remValue/$scale)#{$value};
	} @else {
		@return $remValue#{$value};
	}
}
@mixin type-scale($scale, $base, $value, $measure:"") {
	@if $value == rem {
		font-size: $scale#{px};
		font-size: context-calc($scale, $base, $value);
	} @else if $value == em {
		font-size: context-calc($scale, $base, $value);
	} @else {
		font-size: $scale#{px};
	}
	@if $measure != "" {
		@if $value == rem {
			margin-bottom: measure-margin($scale, $measure, $value: px);
			margin-bottom: measure-margin($scale, $measure, $value);
		} @else if $value == em {
			margin-bottom: measure-margin($scale, $measure, $value: em);
		} @else {
			margin-bottom: measure-margin($scale, $measure, $value);
		}
	}
}